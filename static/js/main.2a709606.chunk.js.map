{"version":3,"sources":["components/Layout/Layout.module.css","components/Layout/Layout.js","redux/contactsSelectors/contactsSelectors.js","redux/actions/contactsActions.js","redux/contactsOperations/contactsOperations.js","components/ContactsForm/ContactsForm.js","components/ContactsList/ContactsListItem.js","components/ContactsList/ContactsList.js","components/Filter/Filter.js","components/Notification/Notification.js","components/Loader/Loader.js","components/Contacts/Contacts.js","components/App/App.js","redux/reducers/contactsReducer.js","redux/store.js","index.js"],"names":["module","exports","Layout","children","className","styles","layout","getContacts","state","contact","contacts","getFilter","filter","getLoading","loading","getvisibleContacts","createSelector","item","name","toLowerCase","includes","addContactsRequest","createAction","addContactsSuccess","addContactsError","getContactsRequest","getContactsSuccess","getContactsError","deleteContactsRequest","deleteContactsSuccess","deleteContactsError","searchFilter","addContacts","dispatch","axios","post","then","response","data","catch","error","get","deleteContacts","id","delete","ContactsForm","number","onHendleChange","e","target","value","setState","onHendleSubmite","preventDefault","props","some","openModal","onAddContacts","this","onSubmit","type","onChange","Component","mapDispatchToProps","contactsOperation","connect","contactsSelector","ownProps","onDelete","onClick","TransitionGroup","component","map","CSSTransition","timeout","classNames","unmountOnExit","contactsSelectors","searchFilterValue","Notification","LoaderContacts","color","height","width","React","Contacts","isOpenModal","hendleIsOpenModal","setTimeout","onGetContacts","in","appear","isLoading","length","contactsOperations","App","addContactsReducer","action","payload","loadingReduserTrue","getContactsFalse","contactsReducer","createReducer","store","configureStore","reducer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2a709606.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"layout\":\"Layout_layout__vObxM\"};","import React from \"react\";\r\nimport styles from \"./Layout.module.css\";\r\n\r\nconst Layout = ({ children }) => {\r\n  return <div className={styles.layout}>{children}</div>;\r\n};\r\n\r\nexport default Layout;\r\n","import { createSelector } from '@reduxjs/toolkit';\r\n\r\nconst getLoading = state => state.contact.loading;\r\n\r\nconst getContacts = state => state.contact.contacts;\r\n\r\nconst getFilter = state => state.contact.filter;\r\n\r\nconst getvisibleContacts = createSelector(\r\n  [getContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(item => item.name.toLowerCase().includes(filter));\r\n  },\r\n);\r\n\r\nexport default { getLoading, getContacts, getFilter, getvisibleContacts };\r\n","import { createAction } from '@reduxjs/toolkit';\r\n\r\nconst addContactsRequest = createAction('contacts/addContactsRequest');\r\nconst addContactsSuccess = createAction('contacts/addContactsSuccess');\r\nconst addContactsError = createAction('contacts/addContactsError');\r\n\r\nconst getContactsRequest = createAction('contacts/getContactsRequest');\r\nconst getContactsSuccess = createAction('contacts/getContactsSuccess');\r\nconst getContactsError = createAction('contacts/getContactsError');\r\n\r\nconst deleteContactsRequest = createAction('contacts/deleteContactsRequest');\r\nconst deleteContactsSuccess = createAction('contacts/deleteContactsSuccess');\r\nconst deleteContactsError = createAction('contacts/deleteContactsError');\r\n\r\nconst searchFilter = createAction('contacts/filterContacts');\r\n\r\nexport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  searchFilter,\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n  addContactsRequest,\r\n  addContactsSuccess,\r\n  addContactsError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n} from '../actions/contactsActions.js';\r\n\r\nconst addContacts = contacts => dispatch => {\r\n  dispatch(addContactsRequest());\r\n\r\n  axios\r\n    .post('http://localhost:2000/contacts', contacts)\r\n    .then(response => {\r\n      dispatch(addContactsSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(addContactsError()));\r\n};\r\n\r\nconst getContacts = () => dispatch => {\r\n  dispatch(getContactsRequest());\r\n\r\n  axios\r\n    .get('http://localhost:2000/contacts')\r\n    .then(response => {\r\n      dispatch(getContactsSuccess(response.data));\r\n    })\r\n    .catch(error => dispatch(getContactsError()));\r\n};\r\n\r\nconst deleteContacts = id => dispatch => {\r\n  dispatch(deleteContactsRequest());\r\n\r\n  axios\r\n    .delete(`http://localhost:2000/contacts/${id}`)\r\n    .then(() => {\r\n      dispatch(deleteContactsSuccess(id));\r\n    })\r\n    .catch(error => dispatch(deleteContactsError()));\r\n};\r\n\r\nexport default { addContacts, getContacts, deleteContacts };\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport contactsSelector from '../../redux/contactsSelectors/contactsSelectors';\r\nimport contactsOperation from '../../redux/contactsOperations/contactsOperations';\r\nimport './ContactsForm.css';\r\n\r\nclass ContactsForm extends Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  onHendleChange = e => {\r\n    const { name, value } = e.target;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  onHendleSubmite = e => {\r\n    e.preventDefault();\r\n    const { contacts } = this.props;\r\n\r\n    const availableContact = contacts.some(\r\n      contact => contact.name === this.state.name,\r\n    );\r\n\r\n    if (availableContact) {\r\n      this.props.openModal();\r\n      return this.setState({ name: '', number: '' });\r\n    }\r\n\r\n    this.props.onAddContacts({ ...this.state });\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n\r\n    return (\r\n      <form className=\"form-styles\" onSubmit={this.onHendleSubmite}>\r\n        <label className=\"label-form\">\r\n          Name\r\n          <input\r\n            className=\"input-form\"\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.onHendleChange}\r\n          />\r\n        </label>\r\n        <label className=\"label-form\">\r\n          Number\r\n          <input\r\n            className=\"input-form\"\r\n            type=\"text\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.onHendleChange}\r\n          />\r\n        </label>\r\n        <button className=\"button-form\" type=\"submit\">\r\n          Add contacts\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelector.getContacts(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onAddContacts: contactsOperation.addContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsForm);\r\n","import React from 'react';\r\nimport './ContactsList.css';\r\nimport contactsOperation from '../../redux/contactsOperations/contactsOperations';\r\nimport { connect } from 'react-redux';\r\n\r\nconst ContactsListItem = ({ contact, onDelete }) => {\r\n  return (\r\n    <li className=\"contacts-list-item\" key={contact.id}>\r\n      <div className=\"contacts-list-info\">\r\n        <p className=\"contacts-list-name\">\r\n          {contact.name}\r\n          <span className=\"contacts-list-number\">{contact.number}</span>\r\n        </p>\r\n        <button\r\n          className=\"contacts-list-button\"\r\n          id={contact.id}\r\n          onClick={onDelete}\r\n        >\r\n          Delete\r\n        </button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch, ownProps) => ({\r\n  onDelete: () =>\r\n    dispatch(contactsOperation.deleteContacts(ownProps.contact.id)),\r\n});\r\n\r\nexport default connect(null, mapDispatchToProps)(ContactsListItem);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactsListItem from './ContactsListItem';\r\nimport { CSSTransition, TransitionGroup } from 'react-transition-group';\r\nimport contactsSelector from '../../redux/contactsSelectors/contactsSelectors';\r\nimport './ContactsList.css';\r\nimport './Transition/contactListTransition.css';\r\n\r\nconst ContactsList = ({ contacts }) => {\r\n  return (\r\n    <TransitionGroup component=\"ul\" className=\"contacts-list\">\r\n      {contacts.map(contact => (\r\n        <CSSTransition\r\n          key={contact.id}\r\n          timeout={250}\r\n          classNames=\"contacts-list-transition\"\r\n          unmountOnExit\r\n        >\r\n          <ContactsListItem key={contact.id} contact={contact} />\r\n        </CSSTransition>\r\n      ))}\r\n    </TransitionGroup>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelector.getvisibleContacts(state)\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(ContactsList);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { searchFilter } from '../../redux/actions/contactsActions';\r\nimport './Filter.css';\r\nimport contactsSelectors from '../../redux/contactsSelectors/contactsSelectors';\r\n\r\nconst Filter = ({ filter, searchFilterValue }) => {\r\n  const onHendleFilter = e => {\r\n    searchFilterValue(e.target.value);\r\n  };\r\n\r\n  return (\r\n    <div className=\"conteiner-filter\">\r\n      <label className=\"label-filter\">\r\n        <input\r\n          className=\"input-filter\"\r\n          type=\"text\"\r\n          onChange={onHendleFilter}\r\n          value={filter}\r\n        />\r\n      </label>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    filter: contactsSelectors.getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = dispatch => {\r\n  return {\r\n    searchFilterValue: value => {\r\n      dispatch(searchFilter(value));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import React from 'react';\r\nimport './Notification.css';\r\n\r\nconst Notification = () => {\r\n  return (\r\n    <div className=\"container\">\r\n      <p className=\"Notification\">Contact already exists!</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Notification;\r\n","import React from 'react';\r\nimport Loader from 'react-loader-spinner';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nexport default class LoaderContacts extends React.Component {\r\n  //other logic\r\n  render() {\r\n    return <Loader \r\n    type=\"ThreeDots\"\r\n    color=\"#00BFFF\" \r\n    height={80} \r\n    width={80} />;\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport ContactsForm from '../ContactsForm/ContactsForm';\r\nimport ContactsList from '../ContactsList/ContactsList';\r\nimport Filter from '../Filter/Filter';\r\nimport Notification from '../Notification/Notification';\r\nimport LoaderContacts from '../Loader/Loader';\r\nimport contactsOperations from '../../redux/contactsOperations/contactsOperations';\r\nimport contactsSelectors from '../../redux/contactsSelectors/contactsSelectors';\r\nimport { CSSTransition } from 'react-transition-group';\r\nimport '../ContactsForm/Transition/ContactsFormTransition.css';\r\nimport './Contacts.css';\r\nimport './Transition/ContactsTransition.css';\r\nimport '../Filter/Transition/Filter-transition.css';\r\nimport '../Notification/Transition/notificationTransition.css';\r\nimport '../ContactsList/Transition/contactListTransition.css';\r\n\r\nclass Contacts extends Component {\r\n  state = {\r\n    isOpenModal: false,\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.onGetContacts();\r\n  }\r\n\r\n  hendleIsOpenModal = () => {\r\n    this.setState({ isOpenModal: true });\r\n    setTimeout(() => {\r\n      this.setState({ isOpenModal: false });\r\n    }, 3000);\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={500}\r\n          classNames=\"title-transition\"\r\n          unmountOnExit\r\n        >\r\n          <h1 className=\"contacts-title\">Phonebook</h1>\r\n        </CSSTransition>\r\n\r\n        <CSSTransition\r\n          in={this.state.isOpenModal}\r\n          timeout={500}\r\n          classNames=\"notification-transition\"\r\n          unmountOnExit\r\n        >\r\n          <Notification />\r\n        </CSSTransition>\r\n\r\n        <CSSTransition\r\n          in={true}\r\n          appear={true}\r\n          timeout={500}\r\n          classNames=\"contacts-form\"\r\n          unmountOnExit\r\n        >\r\n          <ContactsForm openModal={this.hendleIsOpenModal} />\r\n        </CSSTransition>\r\n\r\n        {this.props.isLoading && <LoaderContacts />}\r\n\r\n        <CSSTransition\r\n          in={this.props.contacts.length > 1}\r\n          timeout={250}\r\n          classNames=\"transition-filter\"\r\n          unmountOnExit\r\n        >\r\n          <Filter />\r\n        </CSSTransition>\r\n\r\n        <CSSTransition\r\n          in={this.props.contacts.length > 0}\r\n          timeout={250}\r\n          classNames=\"contacts-list-transition\"\r\n          unmountOnExit\r\n        >\r\n          <ContactsList />\r\n        </CSSTransition>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n  return {\r\n    contacts: contactsSelectors.getContacts(state),\r\n    isLoading: contactsSelectors.getLoading(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  onGetContacts: contactsOperations.getContacts,\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Contacts);\r\n","import React from 'react';\nimport Layout from '../Layout/Layout';\nimport Contacts from '../Contacts/Contacts';\n\nconst App = () => {\n  return (\n    <Layout>\n      <Contacts />\n    </Layout>\n  );\n};\n\nexport default App;\n","import { createReducer } from '@reduxjs/toolkit';\r\n\r\nimport {\r\n  addContactsSuccess,\r\n  addContactsRequest,\r\n  addContactsError,\r\n  getContactsRequest,\r\n  getContactsSuccess,\r\n  getContactsError,\r\n  deleteContactsRequest,\r\n  deleteContactsSuccess,\r\n  deleteContactsError,\r\n  searchFilter,\r\n} from '../actions/contactsActions';\r\n\r\nconst initialeState = {\r\n  contacts: [],\r\n  filter: '',\r\n  loading: false,\r\n};\r\n\r\nconst addContactsReducer = (state, action) => {\r\n  return {\r\n    ...state,\r\n    contacts: [...state.contacts, action.payload],\r\n    loading: false,\r\n  };\r\n};\r\n\r\nconst deleteContactsReducer = (state, action) => {\r\n  return {\r\n    ...state,\r\n    contacts: [\r\n      ...state.contacts.filter(contact => contact.id !== action.payload),\r\n    ],\r\n    loading: false,\r\n  };\r\n};\r\n\r\nconst searchContactsReducer = (state, action) => ({\r\n  ...state,\r\n  filter: action.payload,\r\n});\r\n\r\nconst loadingReduserTrue = state => {\r\n  state.loading = true;\r\n};\r\n\r\nconst getContactsReducer = (state, action) => ({\r\n  ...state,\r\n  contacts: action.payload,\r\n});\r\n\r\nconst getContactsFalse = (state, action) => ({\r\n  ...state,\r\n  contacts: action.payload,\r\n  loading: false,\r\n});\r\n\r\nexport const contactsReducer = createReducer(\r\n  { ...initialeState },\r\n  {\r\n    [addContactsSuccess]: addContactsReducer,\r\n    [deleteContactsSuccess]: deleteContactsReducer,\r\n    [searchFilter]: searchContactsReducer,\r\n\r\n    [addContactsRequest]: loadingReduserTrue,\r\n    [addContactsError]: addContactsReducer,\r\n\r\n    [getContactsSuccess]: getContactsReducer,\r\n\r\n    [getContactsRequest]: loadingReduserTrue,\r\n    [getContactsSuccess]: getContactsFalse,\r\n    [getContactsError]: getContactsFalse,\r\n\r\n    [deleteContactsRequest]: loadingReduserTrue,\r\n    [deleteContactsError]: getContactsFalse,\r\n    [deleteContactsError]: getContactsFalse,\r\n  },\r\n);\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport { contactsReducer } from './reducers/contactsReducer';\r\n\r\nexport const store = configureStore({\r\n  reducer: {\r\n    contact: contactsReducer,\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/App';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}